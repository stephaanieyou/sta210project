---
title: "Final Project"
author: "Diane Lin, Stephanie You"
format: pdf
---
Song hotness - artist familiarity, artist hotness, song duration, artist.terms (genre), start of fade out, start of time fade in, song tempo

Linear model, interaction linear model, classifier (logistic)


```{r messages=F, warnings=F}

library(tidymodels)
library(tidyverse)

music <- read_csv("music.csv")

```


```{r messages=F, warnings=F}

music_filter <- music |>
  filter(str_detect(artist.terms, "rock") |
         str_detect(artist.terms, "rap") |
         str_detect(artist.terms, "pop") |
         str_detect(artist.terms, "country"))

# creating genrealized variables, bc orignial has some subgenres. 

music_filter <- music_filter |>
  mutate(gen_genre = 
           if_else(grepl("rock", music_filter$artist.terms),"rock", 
                   if_else(grepl("rap", music_filter$artist.terms), "rap",
                           if_else(grepl("pop", music_filter$artist.terms), "pop",
                                   if_else(grepl("country", music_filter$artist.terms), "country", "other")))))


music_filter <- music_filter |>
  filter(song.hotttnesss > 0)




music_filter

```
```{r eda, messages=F, warnings=F}
tidy_summary <- sapply(music, summary)
print(tidy_summary)

ggplot(music_filter, aes(x = artist.familiarity, y = song.hotttnesss)) + 
  geom_point()+
  geom_smooth(method = "lm", se = TRUE) +
  labs(x = "Artist Familiarity (from 0 to 1)", y = "Song Hottness (from 0 to 1)",
       title = "Artist familiarity does not necessarily imply song hottness")

ggplot(music_filter, aes(x = artist.familiarity, y = song.hotttnesss)) + 
  geom_point() +
  geom_smooth(method = "lm", se = TRUE) +
  facet_wrap(~ gen_genre, scales = "free") +  # Replace 'genre' with the actual column name
  labs(x = "Artist Familiarity (from 0 to 1)", y = "Song Hottness (from 0 to 1)",
       title = "Song hotness may depend on genre")


```
```{r eda-2, message=F, warning=F}
ggplot(music_filter, aes(x = song.tempo, y = song.hotttnesss)) + 
  geom_point()+
  geom_smooth(method = "lm", se = TRUE) +
  labs(x = "Song Tempo (in beats per minute)", y = "Song Hottness (from 0 to 1)",
       title = "Faster songs do not imply song hotness")

ggplot(music_filter, aes(x = song.tempo, y = song.hotttnesss)) + 
  geom_point()+
  facet_wrap(~ gen_genre, scales = "free") +
  geom_smooth(method = "lm", se = TRUE) +
  labs(x = "Song Tempo (in beats per minute)", y = "Song Hottness (from 0 to 1)",
       title = "Faster songs do not imply song hotness within genres")


```


```{r message=F, warning=F}

#LINEAR MODEL

music_filter <- music_filter |>
  filter(song.hotttnesss > 0)

music_filter


m1 <- lm(song.hotttnesss ~ artist.familiarity + artist.hotttnesss 
         + song.duration + as.factor(gen_genre) + song.start_of_fade_out 
         + song.end_of_fade_in + song.tempo, 
         data = music_filter)


tidy(m1)

summary(m1)


m1_aug <- augment(m1)
m1_aug|>
  ggplot(aes(x = .fitted, y = .resid)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "darkred") +
  labs(title = "No evidence of linearity",
         x = "Fitted hotness",
         y = "Residuals")

```

```{r messages=F, warnings=F}
#LINEAR W INTERACTION, tempo x duration
library(dplyr)
#music_filter

m2 <- lm(song.hotttnesss ~ artist.familiarity + artist.hotttnesss + song.duration + as.factor(gen_genre) + song.start_of_fade_out
         + song.end_of_fade_in + song.tempo + as.factor(gen_genre)*artist.familiarity, data = music_filter)
summary(m2)

m2_aug <- augment(m2)
m2_aug|>
  ggplot(aes(x = .fitted, y = .resid)) +
  geom_point() +
  geom_hline(yintercept = 0, color = "darkred") +
  labs(title = "No evidence of linearity",
         x = "Fitted hotness",
         y = "Residuals")


```

```{r  messages=F, warnings=F}
#classifier

categorical <- music_filter |>
  mutate(cathot = ifelse(song.hotttnesss > 0.5, 1, 0))

categorical

m3 <- glm(as.factor(cathot) ~ artist.familiarity + artist.hotttnesss 
         + song.duration + as.factor(gen_genre) + song.start_of_fade_out 
         + song.end_of_fade_in + song.tempo,
  data = categorical,
  family = "binomial")

m3_aug <- augment(m3, newdata = categorical, type.predict = "response")
print(m3_aug)

m3_confusion <- m3_aug %>%
  mutate(prob = exp(.fitted) / (1 + exp(.fitted)),
         pred_class = ifelse(prob > 0.5, "hot", "not hot")) %>%
  select(.fitted, prob, pred_class, cathot)

confusion_matrix <- table(m3_confusion$pred_class,m3_confusion$cathot)
confusion_matrix

```

